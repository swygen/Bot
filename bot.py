from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ì ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç
USER_LANGUAGE = {}
USER_MESSAGE_ID = {}

TOKEN = '8147124086:AAF8RnTlyUBARkNMnwxMWktgm1JF8gVZTUY'  # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡ßü‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶ì

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    USER_LANGUAGE[user_id] = 'en'  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø

    welcome_text = f"‚ú® **Hello {username}!**\n\nWelcome to **Swygen Official Bot**.\nPlease select your language to continue:"  
    keyboard = [
        [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='set_lang_bn')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')],
    ]
    sent_message = await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'set_lang_bn':
        USER_LANGUAGE[user_id] = 'bn'
    else:
        USER_LANGUAGE[user_id] = 'en'

    await send_main_menu(update, context, edit=True)

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False):
    user_id = update.effective_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    text = "üè† **Main Menu**\n\nSelect an option below:" if lang == 'en' else "üè† **‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ**\n\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:"

    keyboard = [
        [InlineKeyboardButton("üë§ About Me", callback_data='about')],
        [InlineKeyboardButton("üõ†Ô∏è Skills", callback_data='skills')],
        [InlineKeyboardButton("üåê Website", callback_data='website')],
        [InlineKeyboardButton("üìû Contact", callback_data='contact')],
        [InlineKeyboardButton("üóÇÔ∏è Projects", callback_data='projects')],
        [InlineKeyboardButton("üìú Privacy Policy", callback_data='privacy')],
        [InlineKeyboardButton("üë®‚Äçüíª Developer", callback_data='developer')],
        [InlineKeyboardButton("üåê Change Language", callback_data='change_language')],
    ]

    if edit:
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=USER_MESSAGE_ID[user_id],
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        sent_message = await context.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    back_button = [ [InlineKeyboardButton("üîô Back", callback_data='back_to_menu')] ]

    if query.data == 'about':
        text = ("üë§ **About Me**\n\n"
                "Hi, I'm **Ayman Hasan Shaan** a.k.a. **Swygen**.\n"
                "A passionate Web Developer & Automation Expert.") if lang == 'en' else (
                "üë§ **‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá**\n\n"
                "‡¶Ü‡¶Æ‡¶ø **‡¶Ü‡ßü‡¶Æ‡¶æ‡¶® ‡¶π‡¶æ‡¶∏‡¶æ‡¶® ‡¶∂‡¶æ‡¶®** ‡¶ì‡¶∞‡¶´‡ßá **Swygen**‡•§\n"
                "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡•§")

    elif query.data == 'skills':
        text = ("üõ†Ô∏è **Skills**\n\n"
                "- Web Development\n"
                "- App Development\n"
                "- Graphic Design\n"
                "- Bot Development\n"
                "- UI/UX Design\n"
                "- Digital Marketing") if lang == 'en' else (
                "üõ†Ô∏è **‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ**\n\n"
                "- ‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
                "- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
                "- ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n"
                "- ‡¶¨‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
                "- ‡¶á‡¶â‡¶Ü‡¶á/‡¶á‡¶â‡¶è‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n"
                "- ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç")

    elif query.data == 'website':
        text = "üåê Visit my website: [Click Here](https://swygen.netlify.app/)"

    elif query.data == 'contact':
        text = ("üìû **Contact Info**\n\n"
                "- Email: swygenofficial@gmail.com\n"
                "- Phone: 01621439834\n"
                "- Whatsapp: [Message](https://wa.me/message/BQ77IMY2MHW6E1)") if lang == 'en' else (
                "üìû **‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø**\n\n"
                "- ‡¶á‡¶Æ‡ßá‡¶á‡¶≤: swygenofficial@gmail.com\n"
                "- ‡¶´‡ßã‡¶®: 01621439834\n"
                "- ‡¶π‡ßã‡ßü‡¶æ‡¶ü‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™: [‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®](https://wa.me/message/BQ77IMY2MHW6E1)")

    elif query.data == 'privacy':
        text = "üìú [Read our Privacy Policy](https://swygen.netlify.app/police)"

    elif query.data == 'developer':
        text = ("üë®‚Äçüíª **Developer Info**\n\n"
                "Bot Developed by **Swygen Official**.") if lang == 'en' else (
                "üë®‚Äçüíª **‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø**\n\n"
                "**Swygen Official** ‡¶ï‡¶∞‡ßç‡¶§‡ßÉ‡¶ï ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§‡•§")

    elif query.data == 'projects':
        await send_projects_menu(update, context)
        return

    elif query.data == 'change_language':
        await start(update, context)
        return

    elif query.data == 'back_to_menu':
        await send_main_menu(update, context, edit=True)
        return

    await context.bot.edit_message_text(
        chat_id=user_id,
        message_id=USER_MESSAGE_ID[user_id],
        text=text,
        reply_markup=InlineKeyboardMarkup(back_button),
        parse_mode='Markdown'
    )

# ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Æ‡ßá‡¶®‡ßÅ
async def send_projects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    text = "üóÇÔ∏è **Projects**\n\nSelect a project to explore:"

    keyboard = [
        [InlineKeyboardButton("üåê Website Development", callback_data='project_website')],
        [InlineKeyboardButton("üì± App Development", callback_data='project_app')],
        [InlineKeyboardButton("üé® UI/UX Design", callback_data='project_uiux')],
        [InlineKeyboardButton("ü§ñ Chatbot Development", callback_data='project_chatbot')],
        [InlineKeyboardButton("‚òéÔ∏è Customer Support", callback_data='project_support')],
        [InlineKeyboardButton("üë®‚Äçüíª Programming", callback_data='project_programming')],
        [InlineKeyboardButton("üîô Back", callback_data='back_to_menu')],
    ]

    await context.bot.edit_message_text(
        chat_id=user_id,
        message_id=USER_MESSAGE_ID[user_id],
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏
async def send_project_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    project_texts = {
        'project_website': "üåê **Website Development**\n\nCustom websites for businesses and individuals.",
        'project_app': "üì± **App Development**\n\nModern and user-friendly mobile apps.",
        'project_uiux': "üé® **UI/UX Design**\n\nStunning interfaces and experiences.",
        'project_chatbot': "ü§ñ **Chatbot Development**\n\nAutomated bots for business communication.",
        'project_support': "‚òéÔ∏è **Customer Support**\n\nProfessional customer service solutions.",
        'project_programming': "üë®‚Äçüíª **Programming**\n\nEfficient and scalable coding solutions.",
    }

    text = project_texts.get(query.data, "No details available.")

    back_button = [ [InlineKeyboardButton("üîô Back", callback_data='projects')] ]

    await context.bot.edit_message_text(
        chat_id=user_id,
        message_id=USER_MESSAGE_ID[user_id],
        text=text,
        reply_markup=InlineKeyboardMarkup(back_button),
        parse_mode='Markdown'
    )

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶æ‡¶®
async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(language_selected, pattern='^set_lang_'))
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^(about|skills|website|contact|privacy|developer|projects|change_language|back_to_menu)$'))
    application.add_handler(CallbackQueryHandler(send_project_details, pattern='^project_'))

    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
