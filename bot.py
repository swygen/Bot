from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç
USER_LANGUAGE = {}
USER_MESSAGE_ID = {}

TOKEN = '8147124086:AAF8RnTlyUBARkNMnwxMWktgm1JF8gVZTUY'  # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ BotFather ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶ì

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    USER_LANGUAGE[user_id] = 'en'  # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø

    welcome_text = f"üëãüèª **Hello {username}!**\n\nWelcome to Developer Swygen Help Bot.\nPlease select your language to continue:"  
    keyboard = [  
        [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='set_lang_bn')],  
        [InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')],  
    ]  
    sent_message = await update.message.reply_text(  
        welcome_text,  
        reply_markup=InlineKeyboardMarkup(keyboard),  
        parse_mode='Markdown'  
    )  
    USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'set_lang_bn':  
        USER_LANGUAGE[user_id] = 'bn'  
    else:  
        USER_LANGUAGE[user_id] = 'en'  

    await send_main_menu(update, context, edit=True)

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False):
    user_id = update.effective_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    text = "üè° **Main Menu**\n\nChoose what you want to explore:" if lang == 'en' else "üè° **‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ**\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"  

    keyboard = [  
        [InlineKeyboardButton("üë§ About Me", callback_data='about')],  
        [InlineKeyboardButton("üõ†Ô∏è Skills", callback_data='skills')],  
        [InlineKeyboardButton("üåê Website", callback_data='website')],  
        [InlineKeyboardButton("üìû Contact", callback_data='contact')],  
        [InlineKeyboardButton("üóÇÔ∏è Projects", callback_data='projects')],  
        [InlineKeyboardButton("üìú Privacy Policy", callback_data='privacy')],  
        [InlineKeyboardButton("üë®‚Äçüíª Developer", callback_data='developer')],  
        [InlineKeyboardButton("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data='set_lang_bn'),  
         InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')],  
    ]  

    if edit:  
        await context.bot.edit_message_text(  
            chat_id=user_id,  
            message_id=USER_MESSAGE_ID[user_id],  
            text=text,  
            reply_markup=InlineKeyboardMarkup(keyboard),  
            parse_mode='Markdown'  
        )  
    else:  
        sent_message = await context.bot.send_message(  
            chat_id=user_id,  
            text=text,  
            reply_markup=InlineKeyboardMarkup(keyboard),  
            parse_mode='Markdown'  
        )  
        USER_MESSAGE_ID[user_id] = sent_message.message_id

# ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = USER_LANGUAGE.get(user_id, 'en')

    back_button = InlineKeyboardButton("üîô Back", callback_data='back_to_menu')  

    if query.data == 'about':  
        text = "üë§ **About Me**\n\nHi, I'm Ayman Hasan Shaan, passionate about Web Development and Automation." if lang == 'en' else "üë§ **‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá**\n\n‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡ßü‡¶Æ‡¶æ‡¶® ‡¶π‡¶æ‡¶∏‡¶æ‡¶® ‡¶∂‡¶æ‡¶®, ‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶® ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§"  

    elif query.data == 'skills':  
        text = (
            "**My Skills**\n\n"
            "- Web Development\n"
            "- App Development\n"
            "- Graphic Design\n"
            "- Bot Development\n"
            "- UI/UX Design\n"
            "- Digital Marketing"
        ) if lang == 'en' else (
            "**‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ**\n\n"
            "- ‡¶ì‡ßü‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
            "- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
            "- ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n"
            "- ‡¶¨‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü\n"
            "- ‡¶á‡¶â‡¶Ü‡¶á/‡¶á‡¶â‡¶è‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®\n"
            "- ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç"
        )  

    elif query.data == 'projects':  
        text = (
            "**My Projects**\n\n"
            "- Ludo BD Premium\n"
            "- King of Ludo Bot\n"
            "- Premium Service Website"
        ) if lang == 'en' else (
            "**‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶∏**\n\n"
            "- ‡¶≤‡ßÅ‡¶°‡ßã ‡¶¨‡¶ø‡¶°‡¶ø ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ\n"
            "- ‡¶ï‡¶ø‡¶Ç ‡¶Ö‡¶´ ‡¶≤‡ßÅ‡¶°‡ßã ‡¶¨‡¶ü\n"
            "- ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü"
        )  

    elif query.data == 'contact':  
        text = (
            "**Contact Info**\n\n"
            "Email: swygenofficial@gmail.com\n"
            "Phone: 01621439834\n"
            "Whatsapp: https://wa.me/message/BQ77IMY2MHW6E1"
        ) if lang == 'en' else (
            "**‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø**\n\n"
            "‡¶á‡¶Æ‡ßá‡¶á‡¶≤: swygenofficial@gmail.com\n"
            "‡¶´‡ßã‡¶®: 01621439834\n"
            "‡¶π‡ßã‡ßü‡¶æ‡¶ü‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™: https://wa.me/message/BQ77IMY2MHW6E1"
        )  

    elif query.data == 'privacy':  
        text = "üìú [Read our Privacy Policy](https://swygen.netlify.app/police)"  

    elif query.data == 'developer':  
        text = "üë®‚Äçüíª **Developer**\n\nBot developed by Swygen Official."  

    elif query.data == 'back_to_menu':  
        await send_main_menu(update, context, edit=True)  
        return  

    await context.bot.edit_message_text(  
        chat_id=user_id,  
        message_id=USER_MESSAGE_ID[user_id],  
        text=text,  
        reply_markup=InlineKeyboardMarkup([back_button]),  
        parse_mode='Markdown'  
    )

# /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Use /start to restart the bot.")

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶è‡¶™ ‡¶∞‡ßÅ‡¶® ‡¶ï‡¶∞‡¶æ
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))  
    app.add_handler(CommandHandler('help', help_command))  
    app.add_handler(CallbackQueryHandler(language_selected, pattern='^set_lang_'))  
    app.add_handler(CallbackQueryHandler(button_handler))  

    app.run_polling()
